"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
ten terms would be:

                    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

                            01: 01
                            03: 01, 03
                            06: 01, 02, 03, 06
                            10: 01, 02, 05, 10
                            15: 01, 03, 05, 15
                            21: 01, 03, 07, 21
                            28: 01, 02, 04, 07, 14, 28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred
divisors?
"""

# import time
# start_time = time.time()

import math

def n_divisors(num) -> int:
    count = 0
    for i in range(1, int(math.sqrt(num) + 1)):
        if (num % i == 0):
            if (num % i == i):
                count += 1
            else:
                count += 2
    return count


def euler12(number_of_divisors) -> int:
    adding_next = 1
    number = 0
    while True:
        number = number + adding_next
        adding_next += 1
        ndiv = n_divisors(number)
        if ndiv >= number_of_divisors:
            return number


print(euler12(500))

# end_time = time.time()
# print(f"Elapsed time: {end_time - start_time} seconds")
